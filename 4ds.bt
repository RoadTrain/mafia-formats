//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:        4ds.bt
// Author:      hdmaster, minor updates by RoadTrain
// Revision:    0.2
// Purpose:     Defines a template for parsing 4ds files
//--------------------------------------

#include "ls3d.bt"


enum MtlFlag
{
    // ToDo: Add flags which are not required for parsing
    MTL_DIFFUSETEX      = (1 << 18),
    MTL_REFLECTIONTEX   = (1 << 19),
    MTL_IMAGEALPHA      = (1 << 24),
    MTL_OPACITYTEX_ANIM = (1 << 25),
    MTL_DIFFUSETEX_ANIM = (1 << 26),
    MTL_OPACITYTEX      = (1 << 30)
};

enum <uint16> FileVersion
{
    VERSION_MAFIA       = 29,
    VERSION_HD2         = 41,
    VERSION_CHAMELEON   = 42
};

struct MATERIAL
{
    uint32 flags<format=hex>; 

    if (file.version == VERSION_MAFIA) {
        COLOR ambient;
        COLOR diffuse;
        COLOR emissive;
        float opacity;
    } else {
        COLOR ambient;
        FSkip(4);
        COLOR diffuse;
        FSkip(4);
        COLOR specular;
        FSkip(4);
        COLOR emissive;
        FSkip(4);
        float shininess;
        float opacity;
    }

    local bool hasTex<hidden=true>;

    if (flags & MTL_REFLECTIONTEX) {
        float reflectionLevel;
        byte reflectionTextureNameLength;
        if (reflectionTextureNameLength > 0)
            char reflectionTextureName[reflectionTextureNameLength];
    }

    if (flags & MTL_DIFFUSETEX) {
        hasTex = true;
        byte diffuseTextureNameLength;
        if (diffuseTextureNameLength > 0)
            char diffuseTextureName[diffuseTextureNameLength];
    }

    if (flags & MTL_OPACITYTEX && !(flags & MTL_IMAGEALPHA)) {
        hasTex = true;
        byte opacityTextureNameLength;
        if (opacityTextureNameLength > 0)
            char opacityTextureName[opacityTextureNameLength];
    }

    if (!hasTex)
    {
        FSkip(1);
    }

    struct ANIMATION
    {
        uint32 numFrames;
        uint16 unknown;
        uint32 delay;
        uint32 unknown2;
        uint32 unknown3;
    };

    if (flags & MTL_OPACITYTEX_ANIM)
        ANIMATION opacityTextureAnimation;
    else if (flags & MTL_DIFFUSETEX_ANIM)
        ANIMATION diffuseTextureAnimation;
};



struct OBJECT
{
    uint16 instanceID;

    if (instanceID == 0) {
        byte numLODs;
        struct LOD
        {
            float clippingRange;
            if (file.version != VERSION_MAFIA)
                uint32 extraDataLength;
            
            uint16 numVertices;
            if (numVertices) {
                VERTEX vertices[numVertices];

                if (file.version != VERSION_MAFIA) 
                    float extraData[extraDataLength*numVertices];
    
                byte numFaceGroups;
                struct FACEGROUP
                {
                    uint16 numFaces;
                    FACE   faces[numFaces];
                    uint16 mtlID;
                } faceGroups[numFaceGroups]<optimize=false>;
            }
        } LODs[numLODs]<optimize=false>;
    }
};

struct SINGLEMESH(byte numLODs)
{
    if (file.version == VERSION_MAFIA) {
        struct
        {
            byte numBones;
        
            uint32 numNonWeightedVerts;
        
            VECTOR3 min;
            VECTOR3 max;
        
            struct // BONE
            {
                MATRIX inverseTransform;
                uint32 numNonWeightedVerts;
                uint32 numWeightedVerts;
                uint32 boneID;
        
                VECTOR3 min;
                VECTOR3 max;
        
                float  data[numWeightedVerts];
            } bones[numBones]<optimize=false>;
        } LODs[numLODs]<optimize=false>;

    } else {
        byte numBones;
            
        if (file.version == VERSION_HD2) {
            VECTOR4 min;
            VECTOR4 max;
        } else {
            VECTOR3 min;
            VECTOR3 max;
        }

        byte parentIDs[numBones];

        struct //BONE
        {
            MATRIX inverseTransform;
            if (file.version == VERSION_HD2) {
                VECTOR4 min;
                VECTOR4 max;
            } else {
                VECTOR3 min;
                VECTOR3 max;
            }
        } bones[numBones]<optimize=false>;

        struct //LOD
        {
            uint32 numWeights;
            struct WEIGHT
            {
                byte boneID;
                byte unknown;
            } weights[numWeights];
        } LODs[numLODs]<optimize=false>;
    }
};

struct BILLBOARD
{
    uint32  axis;
    bool    axisMode;
};

struct MORPH
{
    byte numTargets;
    byte numChannels;
    byte unknown;

    if (numTargets > 0) {
        struct MORPHCHANNEL
        {
            uint16 numVertices;
        
            if (numVertices > 0) {
                struct MORPHEDVERTEX
                {
                    struct MORPHTARGET
                    {
                        VECTOR3 p;
                        VECTOR3 n;
                    } morphTargets[numTargets]<optimize=false>;
                } vertices[numVertices]<optimize=false>;
        
                bool unknown;
                if (unknown != 0)
                    uint16 vertexIndices[numVertices];
            }
        } channels[numChannels]<optimize=false>;
        
        if (file.version == VERSION_HD2)
            float unknown2[12];
        else
            float unknown2[10];
    }
};

struct LENSFLARE
{
    byte numGlows;
    
    struct GLOW
    {
        if (file.version == VERSION_MAFIA) {
            float position;
            uint16 mtlID;
        } else {
            float position;
            float scale; // ?
            uint16 mtlID;
        }
    } glows[numGlows]<optimize=true>;
};

struct MIRROR
{
    if (file.version == VERSION_HD2) {
        VECTOR4 min;
        VECTOR4 max;
    } else {
        VECTOR3 min;
        VECTOR3 max;
    }

    float  unknown[4];
    MATRIX reflectionMatrix;
    COLOR  color;

    if (file.version == VERSION_HD2)
        FSkip(4);

    float  reflectionStrength;
    uint32 numVertices;
    uint32 numFaces;

    if (file.version == VERSION_HD2)
        VECTOR4 vertices[numVertices];
    else
        VECTOR3 vertices[numVertices];

    FACE faces[numFaces];
};

struct SECTOR
{
    uint32 flags[2];
    uint32 numVertices;
    uint32 numFaces;
    
    if (file.version == VERSION_HD2) {
        VECTOR4 min;
        VECTOR4 max;
        VECTOR4 vertices[numVertices];    
    } else {
        if (file.version != VERSION_MAFIA) {
            VECTOR3 min;
            VECTOR3 max;
        }
        VECTOR3 vertices[numVertices];
    }

    FACE faces[numFaces];

    if (file.version == VERSION_MAFIA) {
        VECTOR3 min;
        VECTOR3 max;
    }

    byte numPortals;
    struct PORTAL
    {
        byte    numVertices;
        PLANE   plane;
        uint32  flags;
        float   nearRange;
        float   farRange;

        if (file.version != VERSION_MAFIA)
            int32 unknown;
    
        if (file.version == VERSION_HD2)
            VECTOR4 vertices[numVertices];
        else
            VECTOR3 vertices[numVertices];
    } portals[numPortals]<optimize=false>;
};


struct DUMMY
{
    if (file.version == VERSION_HD2) {
        VECTOR3 min;
        int32 unknown;
        VECTOR3 max;
        int32 unknown;
    } else {
        VECTOR3 min;
        VECTOR3 max;
    }
};

struct TARGET
{
    uint16  unknown;
    byte    numLinks;
    uint16  linkIDs[numLinks];
};

struct JOINT
{
    if (file.version == VERSION_MAFIA)
        MATRIX  matrix;
    uint32  ID;
};

struct OCCLUDER
{
    uint32 numVertices;
    uint32 numFaces;
    
    if (file.version == VERSION_HD2)
        VECTOR4 vertices[numVertices];
    else
        VECTOR3 vertices[numVertices];

    FACE faces[numFaces];
};

struct NODE
{
    FrameType frameType;
    if (frameType == FRAME_VISUAL) {
        VisualType  visualType;
        byte        visualFlags[2];
    }

    ushort parentID;

    if (file.version == VERSION_MAFIA) {
        VECTOR3 position;
        VECTOR3 scale;
        QUAT_WXYZ rotation;

    } else {
        VECTOR3 position;
        QUAT_XYZW rotation;
        VECTOR3 scale;
    
        if (file.version == VERSION_HD2)
            FSkip(4);
    }

    byte cullingFlags;

    byte nameLength<hidden=true>;
    if (nameLength > 0)
        char name[nameLength];
    byte userPropertiesLength<hidden=true>;
    if (userPropertiesLength > 0)
        char userProperties[userPropertiesLength];

    switch (frameType) {
    case FRAME_VISUAL: {
        switch (visualType) {
        case VISUAL_OBJECT:
            OBJECT object;
            break;
        case VISUAL_SINGLEMESH:
            OBJECT object;
            SINGLEMESH singleMesh(object.numLODs);
            break;
        case VISUAL_SINGLEMORPH:
            OBJECT object;
            SINGLEMESH singleMesh(object.numLODs);
            MORPH morph;
            break;
        case VISUAL_BILLBOARD:
            OBJECT object;
            BILLBOARD billboard;
            break;
        case VISUAL_MORPH:
            OBJECT object;
            MORPH morph;
            break;
        case VISUAL_LENS:
            LENSFLARE lens;
            break;
        case VISUAL_MIRROR:
            MIRROR mirror;
            break;
        default:
            Warning("Invalid visual type: %d", visualType);
            return -1;
        }
    } break;
    case FRAME_SECTOR:
        SECTOR sector;
        break;
    case FRAME_DUMMY:
        DUMMY  dummy;
        break;
    case FRAME_TARGET:
        TARGET target;
        break;
    case FRAME_JOINT:
        JOINT  joint;
        break;
    case FRAME_OCCLUDER:
        OCCLUDER occluder;
        break;
    default:
        Warning("Invalid frame type: %d", frameType);
        return -1;
    }

};

struct FILE
{
    char fourCC[4];

    if (fourCC != "4DS") {
        Warning("Invalid file format: %d", fourCC);
        return -1;
    }

    FileVersion version;

    if (version != VERSION_MAFIA && version != VERSION_HD2 && version != VERSION_CHAMELEON) {
        Warning("Invalid file version: %d", version);
        return -1;
    }

    FILETIME timestamp;

    uint16 numMaterials;
    MATERIAL materials[numMaterials]<optimize=false>;

    uint16 numNodes;
    NODE nodes[numNodes]<optimize=false>;

    bool hasAnimationFile;
} file;